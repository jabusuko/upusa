-- Fish It Roblox Script - Delta Executor Safe Version
-- Optimized for Delta Executor with comprehensive error handling

print("Loading Fish It Script for Delta Executor...")

-- Wait for game to load
task.wait(2)

-- Safe WindUI loading
local WindUI
local success, err = pcall(function()
    WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
end)

if not success or not WindUI then
    print("Error loading WindUI:", err)
    return
end

print("WindUI loaded successfully!")

-- Safe theme creation
local themeSuccess, themeErr = pcall(function()
    WindUI:AddTheme({
        Name = "Fyy Exploit", 
        Accent = WindUI:Gradient({                                                  
            ["0"] = { Color = Color3.fromHex("#1f1f23"), Transparency = 0 },        
            ["100"]   = { Color = Color3.fromHex("#18181b"), Transparency = 0 },    
        }, {                                                                        
            Rotation = 0,                                                           
        }),                                                                         
        Dialog = Color3.fromHex("#161616"),
        Outline = Color3.fromHex("#FFFFFF"),
        Text = Color3.fromHex("#FFFFFF"),
        Placeholder = Color3.fromHex("#7a7a7a"),
        Background = Color3.fromHex("#101010"),
        Button = Color3.fromHex("#52525b"),
        Icon = Color3.fromHex("#a1a1aa")
    })
end)

if not themeSuccess then
    print("Error creating theme:", themeErr)
    return
end

print("Theme created successfully!")

-- Safe Window creation
local Window
local windowSuccess, windowErr = pcall(function()
    Window = WindUI:CreateWindow({
        Title = "FyyExploit",
        Icon = "slack", 
        Author = "Fyy X Fish IT",
        Folder = "FyyConfig",
        Size = UDim2.fromOffset(530, 300),
        MinSize = Vector2.new(320, 300),
        MaxSize = Vector2.new(850, 560),
        Transparent = true,
        Theme = "Dark",
        Resizable = true,
        SideBarWidth = 150,
        BackgroundImageTransparency = 0.42,
        HideSearchBar = false,
        ScrollBarEnabled = false,
    })
end)

if not windowSuccess or not Window then
    print("Error creating window:", windowErr)
    return
end

print("Window created successfully!")

-- Safe toggle key setting
local toggleSuccess, toggleErr = pcall(function()
    Window:SetToggleKey(Enum.KeyCode.G)
end)

if not toggleSuccess then
    print("Error setting toggle key:", toggleErr)
end

-- Safe notification
local notifySuccess, notifyErr = pcall(function()
    WindUI:Notify({
        Title = "FyyLoader",
        Content = "Press G To Open/Close Menu!",
        Duration = 4, 
        Icon = "slack",
    })
end)

if not notifySuccess then
    print("Error showing notification:", notifyErr)
end

-- Safe tab creation
local function createTab(name, icon)
    local success, tab = pcall(function()
        return Window:Tab({
            Title = name,
            Icon = icon
        })
    end)
    
    if success and tab then
        print("Tab created:", name)
        return tab
    else
        print("Error creating tab:", name, tab)
        return nil
    end
end

local Info = createTab("Info", "info")
local Player = createTab("Player", "user")
local Auto = createTab("Main", "play")
local Shop = createTab("Shop", "shopping-cart")
local Teleport = createTab("Teleport", "map-pin")
local Quest = createTab("Quest", "loader")
local Setting = createTab("Settings", "settings")
local Enchant = createTab("Enchants", "star")
local Discord = createTab("Webhook", "megaphone")
local Config = createTab("Config", "folder")

-- Check if all tabs were created successfully
if not Info or not Player or not Auto or not Shop or not Teleport or not Quest or not Setting or not Enchant or not Discord or not Config then
    print("Error: Some tabs failed to create. Script may not work properly.")
    return
end

print("All tabs created successfully!")

-- Safe section creation
local function createSection(tab, title)
    local success, section = pcall(function()
        return tab:Section({ Title = title })
    end)
    
    if success and section then
        return section
    else
        print("Error creating section:", title)
        return nil
    end
end

-- Create sections
local InfoSection = createSection(Info, "Have Problem / Need Help? Join Server Now")
local PlayerSection = createSection(Player, "Player Feature")

-- Safe Info:Select()
local selectSuccess, selectErr = pcall(function()
    Info:Select()
end)

if not selectSuccess then
    print("Error selecting Info tab:", selectErr)
end

-- Safe CopyLink function
local function CopyLink(link, title, notifTitle, notifContent)
    local buttonSuccess, buttonErr = pcall(function()
        Info:Button({
            Title = title or "Copy Link",
            Desc = "Click to copy link",
            Callback = function()
                local copySuccess, copyErr = pcall(function()
                    if setclipboard then
                        setclipboard(link)
                    end
                end)
                
                if not copySuccess then
                    print("Error copying to clipboard:", copyErr)
                end
                
                local notifySuccess, notifyErr = pcall(function()
                    WindUI:Notify({
                        Title = notifTitle or "Copied!",
                        Content = notifContent or ("Link '" .. link .. "' copied to clipboard"),
                        Duration = 3,
                        Icon = "bell",
                    })
                end)
                
                if not notifySuccess then
                    print("Error showing notification:", notifyErr)
                end
            end
        })
    end)
    
    if not buttonSuccess then
        print("Error creating CopyLink button:", buttonErr)
    end
end

-- Safe CopyLink call
local copyLinkSuccess, copyLinkErr = pcall(function()
    CopyLink(
        "https://discord.gg/77nEeYeFRp",
        "Copy Discord Link",
        "Discord Copied!",
        "Link copied to clipboard"
    )
end)

if not copyLinkSuccess then
    print("Error calling CopyLink:", copyLinkErr)
end

-- Remote Functions Loading
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

print("Loading remote functions...")

-- Safe Remote Function Loading for Delta Executor
local function getRemote(path)
    local success, remote = pcall(function()
        return ReplicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net[path]
    end)
    if success and remote then
        print("Remote loaded:", path)
        return remote
    else
        -- Fallback method for Delta Executor
        local packages = ReplicatedStorage:FindFirstChild("Packages")
        if packages then
            local net = packages:FindFirstChild("_Index")
            if net then
                local sleitnick = net:FindFirstChild("sleitnick_net@0.2.0")
                if sleitnick then
                    local netFolder = sleitnick:FindFirstChild("net")
                    if netFolder then
                        local remote = netFolder:FindFirstChild(path)
                        if remote then
                            print("Remote loaded (fallback):", path)
                            return remote
                        end
                    end
                end
            end
        end
        print("Warning: Remote not found:", path)
        return nil
    end
end

-- Load all required remotes
local REEquipToolFromHotbar = getRemote("RE/EquipToolFromHotbar")
local RFChargeFishingRod = getRemote("RF/ChargeFishingRod")
local RFRequestFishingMinigameStarted = getRemote("RF/RequestFishingMinigameStarted")
local REFishingCompleted = getRemote("RE/FishingCompleted")
local REUnequipToolFromHotbar = getRemote("RE/UnequipToolFromHotbar")
local RFCancelFishingInputs = getRemote("RF/CancelFishingInputs")
local REFishCaught = getRemote("RE/FishCaught")

-- Validate all required remotes
local function validateRemotes()
    local missingRemotes = {}
    
    if not REEquipToolFromHotbar then table.insert(missingRemotes, "RE/EquipToolFromHotbar") end
    if not RFChargeFishingRod then table.insert(missingRemotes, "RF/ChargeFishingRod") end
    if not RFRequestFishingMinigameStarted then table.insert(missingRemotes, "RF/RequestFishingMinigameStarted") end
    if not REFishingCompleted then table.insert(missingRemotes, "RE/FishingCompleted") end
    if not REUnequipToolFromHotbar then table.insert(missingRemotes, "RE/UnequipToolFromHotbar") end
    if not RFCancelFishingInputs then table.insert(missingRemotes, "RF/CancelFishingInputs") end
    if not REFishCaught then table.insert(missingRemotes, "RE/FishCaught") end
    
    if #missingRemotes > 0 then
        print("Warning: Missing remote functions:", table.concat(missingRemotes, ", "))
        return false
    end
    
    print("All remote functions loaded successfully!")
    return true
end

-- Check remotes
local remotesValid = validateRemotes()

-- Show startup notification
if remotesValid then
    WindUI:Notify({
        Title = "FyyExploit",
        Content = "Script loaded successfully! All features ready.",
        Duration = 5,
        Icon = "check"
    })
else
    WindUI:Notify({
        Title = "FyyExploit",
        Content = "Warning: Some remote functions failed to load. Some features may not work.",
        Duration = 8,
        Icon = "alert-triangle"
    })
end

-- Safe Functions
local function safeFire(remote, arg)
    if not remote then
        print("Warning: Remote function not found for FireServer")
        return false
    end
    local ok, err = pcall(function()
        if arg ~= nil then
            remote:FireServer(arg)
        else
            remote:FireServer()
        end
    end)
    if not ok then
        print("Error in safeFire:", err)
        return false
    end
    return true
end

local function safeInvoke(remote, arg1, arg2)
    if not remote then
        print("Warning: Remote function not found for InvokeServer")
        return nil
    end
    local ok, res = pcall(function()
        if arg1 ~= nil and arg2 ~= nil then
            return remote:InvokeServer(arg1, arg2)
        elseif arg1 ~= nil then
            return remote:InvokeServer(arg1)
        else
            return remote:InvokeServer()
        end
    end)
    if not ok then
        print("Error in safeInvoke:", res)
        return nil
    end
    return res
end

local function showNotification(title, content)
    if WindUI and WindUI.Notify then
        WindUI:Notify({
            Title = title,
            Content = content,
            Duration = 3,
        })
    end
end

-- Auto Fishing Variables
local lastFishTime = 0
local running = false
local equipped = false
local lastResetTime = 0
local fishCheckEnabled = false
local initialSetupDone = false 

-- Auto Fishing Functions
local function equipToolOnce()
    if not equipped then
        for i = 1, 3 do
            safeFire(REEquipToolFromHotbar, 1)
        end
        equipped = true
    end
end

local function resetTool()
    safeFire(REUnequipToolFromHotbar)
    equipped = false
    equipToolOnce()
end

local function doChargeAndRequest()
    safeInvoke(RFChargeFishingRod, 2)
    
    for i = 1, 1 do
        safeInvoke(RFRequestFishingMinigameStarted, -1.25, 1)
        task.wait() 
    end
end

local function doRequestOnly()
    for i = 1, 2 do
        safeInvoke(RFRequestFishingMinigameStarted, -1.25, 1)
        task.wait() 
    end
end

local function forceResetFishing()
    for i = 1, 2 do
        safeInvoke(RFCancelFishingInputs)
    end
    
    resetTool()
    task.wait(0.5) 
    doChargeAndRequest()  
    lastFishTime = tick() 
end

local function fishCheckLoop()
    local retryCount = 0
    local maxRetries = 10
    
    while running and fishCheckEnabled do
        local currentTime = tick()
        if currentTime - lastFishTime >= 8 and lastFishTime > 0 then
            retryCount = retryCount + 1
            forceResetFishing()
            
            if retryCount >= maxRetries then
                retryCount = 0
            end
        else
            retryCount = 0
        end
        task.wait(1)
    end
end

local function spamCompletedLoop()
    while running do
        safeFire(REFishingCompleted)
        task.wait()
    end
end

local function equipToolLoop()
    while running do
        safeFire(REEquipToolFromHotbar, 1)
        task.wait(2)
    end
end

local function periodicResetLoop()
    while running do
        task.wait(300)
        if running then
            resetTool()
            lastResetTime = tick()
        end
    end
end

local function setupFishCaughtHandler()
    if REFishCaught then
        REFishCaught.OnClientEvent:Connect(function(fishName, fishData)
            lastFishTime = tick()
            
            if running then
                task.wait(0.09)
                doChargeAndRequest() 
            end
        end)
    end
end

local function fishingCycle()
    lastResetTime = tick()
    lastFishTime = tick()
    fishCheckEnabled = true
    
    setupFishCaughtHandler()
    
    task.spawn(spamCompletedLoop)
    task.spawn(equipToolLoop)
    task.spawn(fishCheckLoop)
    task.spawn(periodicResetLoop)
    
    task.wait(0.5)  
    doChargeAndRequest()  
    initialSetupDone = true
    
    while running do
        task.wait()
    end
    
    fishCheckEnabled = false
    initialSetupDone = false
end

-- Auto Fishing Toggle
local autoFishingToggle = Auto:Toggle({
    Title = "Auto Fishing", 
    Type = "Toggle",
    Desc = "INSTANT FISHING - WITH ANTI STUCK SYSTEM",
    Default = false,
    Callback = function(state) 
        if not remotesValid then
            showNotification("Error", "Remote functions not loaded properly!")
            return
        end
        
        running = state
        autoFishingRunning = state 
        
        if running then
            task.spawn(fishingCycle)
        else
            safeInvoke(RFCancelFishingInputs)
            equipped = false
            fishCheckEnabled = false
            initialSetupDone = false
        end
    end
})

-- Fast Instant Fishing Variables
local fastInstantFishingRunning = false
local fastInstantFishingEnabled = false
local fastFishingLoop = nil

-- Fast Instant Fishing Functions
local function startFastInstantFishing()
    if fastFishingLoop then
        fastFishingLoop:Disconnect()
        fastFishingLoop = nil
    end
    
    fastFishingLoop = game:GetService("RunService").Heartbeat:Connect(function()
        if fastInstantFishingEnabled then
            -- Ultra fast fishing cycle
            safeFire(REEquipToolFromHotbar, 1)
            safeInvoke(RFChargeFishingRod, 2)
            safeInvoke(RFRequestFishingMinigameStarted, -1.25, 1)
            safeFire(REFishingCompleted)
        end
    end)
end

local function stopFastInstantFishing()
    if fastFishingLoop then
        fastFishingLoop:Disconnect()
        fastFishingLoop = nil
    end
    safeInvoke(RFCancelFishingInputs)
end

-- Fast Instant Fishing Toggle
local fastInstantFishingToggle = Auto:Toggle({
    Title = "Auto Fishing",
    Type = "Toggle", 
    Desc = "FAST INSTANT FISHING",
    Default = false,
    Callback = function(state)
        if not remotesValid then
            showNotification("Error", "Remote functions not loaded properly!")
            return
        end
        
        fastInstantFishingEnabled = state
        fastInstantFishingRunning = state
        
        -- Jika Fast Instant Fishing diaktifkan, matikan Auto Fishing biasa
        if state and running then
            autoFishingToggle:Set(false)
        end
        
        if state then
            startFastInstantFishing()
            showNotification("Fast Instant Fishing", "Ultra fast fishing mode activated! ⚡")
        else
            stopFastInstantFishing()
            showNotification("Fast Instant Fishing", "Fast fishing mode deactivated")
        end
    end
})

-- Add some spacing
Auto:Space()
Auto:Divider()

print("Fish It Script loaded successfully for Delta Executor!")
print("Press G to open/close the menu")
print("Use the Main tab to access fishing features")
